import React, { useState } from "react";
import { MapContainer, TileLayer } from 'react-leaflet';
//import 'leaflet/dist/leaflet.css';
import '../styles/PredictGroundPage.css';
import someImage from '../assets/someImage.png';
<img src={someImage} alt="description" />

function PredictGroundPage() {
  const [formData, setFormData] = useState({
    temperature: "",
    dissolvedOxygen: "",
    pH: "",
    salinity: "",
    turbidity: "",
    soilPH: "",
    soilTexture: "Sandy",
    diseaseWSSV: false,
    diseaseEHP: false,
    weather: "Sunny",
  });

  const [prediction, setPrediction] = useState(null);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Perform validation (example: range for temperature)
    if (formData.temperature < 0 || formData.temperature > 40) {
      alert("Temperature must be between 0°C and 40°C.");
      return;
    }

    // Simulate prediction API call
    const fakePrediction = {
      score: Math.floor(Math.random() * 10) + 1,
      feedback: "Suitable conditions for shrimp farming.",
    };
    setPrediction(fakePrediction);
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Predict Shrimp Farming Suitability</h1>

      {/* Map Section */}
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">Location Map</h2>
        <MapContainer 
          center={[7.8731, 80.7718]} // Coordinates for Sri Lanka
          zoom={8} 
          className="h-64 w-full rounded shadow-lg">
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
          />
        </MapContainer>
      </div>

      {/* Form Section */}
      <form
        className="bg-white shadow-lg rounded-lg p-6 grid grid-cols-1 md:grid-cols-2 gap-4"
        onSubmit={handleSubmit}
      >
        {/* Environmental Parameters */}
        <div>
          <label className="block text-sm font-medium mb-2">Temperature (°C)</label>
          <input
            type="number"
            name="temperature"
            value={formData.temperature}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Dissolved Oxygen (mg/L)</label>
          <input
            type="number"
            name="dissolvedOxygen"
            value={formData.dissolvedOxygen}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">pH</label>
          <input
            type="number"
            name="pH"
            value={formData.pH}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Salinity (ppt)</label>
          <input
            type="number"
            name="salinity"
            value={formData.salinity}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Turbidity (NTU)</label>
          <input
            type="number"
            name="turbidity"
            value={formData.turbidity}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Soil pH</label>
          <input
            type="number"
            name="soilPH"
            value={formData.soilPH}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Soil Texture</label>
          <select
            name="soilTexture"
            value={formData.soilTexture}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          >
            <option value="Sandy">Sandy</option>
            <option value="Loamy">Loamy</option>
            <option value="Clayey">Clayey</option>
          </select>
        </div>

        {/* Disease Data */}
        <div className="col-span-2">
          <label className="block text-sm font-medium mb-2">Disease Data</label>
          <div className="flex items-center gap-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                name="diseaseWSSV"
                checked={formData.diseaseWSSV}
                onChange={handleInputChange}
                className="mr-2"
              />
              WSSV
            </label>
            <label className="flex items-center">
              <input
                type="checkbox"
                name="diseaseEHP"
                checked={formData.diseaseEHP}
                onChange={handleInputChange}
                className="mr-2"
              />
              EHP
            </label>
          </div>
        </div>

        {/* Climatic Data */}
        <div className="col-span-2">
          <label className="block text-sm font-medium mb-2">Weather Conditions</label>
          <select
            name="weather"
            value={formData.weather}
            onChange={handleInputChange}
            className="w-full p-2 border rounded"
          >
            <option value="Sunny">Sunny</option>
            <option value="Rainy">Rainy</option>
            <option value="Stormy">Stormy</option>
          </select>
        </div>

        {/* Submit Button */}
        <div className="col-span-2 flex justify-center">
          <button
            type="submit"
            className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
          >
            Predict Suitability
          </button>
        </div>
      </form>

      {/* Prediction Output */}
      {prediction && (
        <div className="mt-6 p-4 bg-gray-100 rounded shadow">
          <h2 className="text-lg font-bold mb-2">Prediction Result</h2>
          <p>Suitability Score: {prediction.score} / 10</p>
          <p>Feedback: {prediction.feedback}</p>
        </div>
      )}
    </div>
  );
};

export default PredictGroundPage;
